[{"line":1,"elements":[{"start_timestamp":"2024-07-31T08:11:05.991Z","line":2,"name":"User can login with valid credentials","description":"","id":"login;user-can-login-with-valid-credentials","type":"scenario","keyword":"Scenario","steps":[{"result":{"duration":2220000,"status":"passed"},"line":3,"name":"payload has a valid username and password","match":{"location":"stepDefs.authLogin.AuthLoginTest.payloadHasAValidUsernameAndPassword()"},"keyword":"Given "},{"result":{"duration":723019000,"status":"passed"},"line":4,"name":"I send a POST request to the login endpoint","match":{"location":"stepDefs.authLogin.AuthLoginTest.iSendAPOSTRequestToTheLoginEndpoint()"},"keyword":"When "},{"result":{"duration":2318000,"status":"passed"},"line":5,"name":"the HTTP status code should be 200 \"OK\"","match":{"arguments":[{"val":"200","offset":31},{"val":"\"OK\"","offset":35}],"location":"stepDefs.CommonSteps.theHTTPStatusCodeShouldBe(int,java.lang.String)"},"keyword":"Then "},{"result":{"duration":181870000,"status":"passed"},"line":6,"name":"the response should include an authentication token","match":{"location":"stepDefs.authLogin.AuthLoginTest.theResponseShouldIncludeAnAuthenticationToken()"},"keyword":"And "}]},{"start_timestamp":"2024-07-31T08:11:06.911Z","line":9,"name":"User login with invalid credentials","description":"","id":"login;user-login-with-invalid-credentials","type":"scenario","keyword":"Scenario","steps":[{"result":{"duration":167000,"status":"passed"},"line":10,"name":"payload has an invalid username and password","match":{"location":"stepDefs.authLogin.AuthLoginTest.payloadHasAnInvalidUsernameAndPassword()"},"keyword":"Given "},{"result":{"duration":15745000,"status":"passed"},"line":11,"name":"I send a POST request to the login endpoint","match":{"location":"stepDefs.authLogin.AuthLoginTest.iSendAPOSTRequestToTheLoginEndpoint()"},"keyword":"When "},{"result":{"duration":223000,"status":"passed"},"line":12,"name":"the HTTP status code should be 401 \"OK\"","match":{"arguments":[{"val":"401","offset":31},{"val":"\"OK\"","offset":35}],"location":"stepDefs.CommonSteps.theHTTPStatusCodeShouldBe(int,java.lang.String)"},"keyword":"Then "},{"result":{"duration":5521000,"status":"passed"},"line":13,"name":"the response should include an error message","match":{"location":"stepDefs.authLogin.AuthLoginTest.theResponseShouldIncludeAnErrorMessage()"},"keyword":"And "}]},{"start_timestamp":"2024-07-31T08:11:06.939Z","line":15,"name":"User login with empty body","description":"","id":"login;user-login-with-empty-body","type":"scenario","keyword":"Scenario","steps":[{"result":{"duration":153000,"status":"passed"},"line":16,"name":"payload has is an empty body","match":{"location":"stepDefs.authLogin.AuthLoginTest.payloadHasIsAnEmptyBody()"},"keyword":"Given "},{"result":{"duration":15999000,"status":"passed"},"line":17,"name":"I send a POST request to the login endpoint","match":{"location":"stepDefs.authLogin.AuthLoginTest.iSendAPOSTRequestToTheLoginEndpoint()"},"keyword":"When "},{"result":{"duration":630000,"status":"passed"},"line":18,"name":"the HTTP status code should be 400 \"bad request\"","match":{"arguments":[{"val":"400","offset":31},{"val":"\"bad request\"","offset":35}],"location":"stepDefs.CommonSteps.theHTTPStatusCodeShouldBe(int,java.lang.String)"},"keyword":"Then "},{"result":{"duration":6978000,"status":"passed"},"line":19,"name":"the response should include an error message","match":{"location":"stepDefs.authLogin.AuthLoginTest.theResponseShouldIncludeAnErrorMessage()"},"keyword":"And "}]}],"name":"Login","description":"","id":"login","keyword":"Feature","uri":"file:src/test/resources/features/authLogin.feature","tags":[]},{"line":1,"elements":[{"start_timestamp":"2024-07-31T08:11:06.971Z","line":2,"name":"Get a list of all courses","description":"","id":"courses;get-a-list-of-all-courses","type":"scenario","keyword":"Scenario","steps":[{"result":{"duration":400000,"status":"passed"},"line":3,"name":"the courses endpoint is available","match":{"location":"stepDefs.courses.GetCourses.theCoursesEndpointIsAvailable()"},"keyword":"Given "},{"result":{"duration":114456000,"status":"passed"},"line":4,"name":"I send a GET request to the courses endpoint","match":{"location":"stepDefs.courses.GetCourses.iSendAGETRequestToTheCoursesEndpoint()"},"keyword":"When "},{"result":{"duration":204000,"status":"passed"},"line":5,"name":"the HTTP status code should be 200 \"OK\"","match":{"arguments":[{"val":"200","offset":31},{"val":"\"OK\"","offset":35}],"location":"stepDefs.CommonSteps.theHTTPStatusCodeShouldBe(int,java.lang.String)"},"keyword":"Then "},{"result":{"duration":21591000,"status":"passed"},"line":6,"name":"the response should include an array of all courses","match":{"location":"stepDefs.courses.GetCourses.theResponseShouldIncludeAnArrayOfAllCourses()"},"keyword":"And "}]},{"start_timestamp":"2024-07-31T08:11:07.113Z","line":8,"name":"Get a specific course by id","description":"","id":"courses;get-a-specific-course-by-id","type":"scenario","keyword":"Scenario","steps":[{"result":{"duration":640000,"status":"passed"},"line":9,"name":"the course with id 1 exists","match":{"arguments":[{"val":"1","offset":19}],"location":"stepDefs.courses.GetCourseById.theCourseWithIdExists(int)"},"keyword":"Given "},{"result":{"duration":35604000,"status":"passed"},"line":10,"name":"I send a GET request to the courses endpoint with id 1","match":{"arguments":[{"val":"1","offset":53}],"location":"stepDefs.courses.GetCourseById.iSendAGETRequestToTheCoursesEndpointWithId(int)"},"keyword":"When "},{"result":{"duration":197000,"status":"passed"},"line":11,"name":"the HTTP status code should be 200 \"OK\"","match":{"arguments":[{"val":"200","offset":31},{"val":"\"OK\"","offset":35}],"location":"stepDefs.CommonSteps.theHTTPStatusCodeShouldBe(int,java.lang.String)"},"keyword":"Then "},{"result":{"duration":2510000,"status":"passed"},"line":12,"name":"the response should include the details of the course with ID 1.","match":{"arguments":[{"val":"1","offset":62}],"location":"stepDefs.courses.GetCourseById.theResponseShouldIncludeTheDetailsOfTheCourseWithID(int)"},"keyword":"And "}]},{"start_timestamp":"2024-07-31T08:11:07.157Z","line":15,"name":"Get course by non-existent id","description":"","id":"courses;get-course-by-non-existent-id","type":"scenario","keyword":"Scenario","steps":[{"result":{"duration":128000,"status":"passed"},"line":16,"name":"the course id 999 does not exist","match":{"arguments":[{"val":"999","offset":14}],"location":"stepDefs.courses.GetCourseById.theCourseIdDoesNotExist(int)"},"keyword":"Given "},{"result":{"duration":10467000,"status":"passed"},"line":17,"name":"I send a GET request to the courses endpoint with id 999","match":{"arguments":[{"val":"999","offset":53}],"location":"stepDefs.courses.GetCourseById.iSendAGETRequestToTheCoursesEndpointWithId(int)"},"keyword":"When "},{"result":{"error_message":"java.lang.AssertionError: \nExpected: is <404>\n     but: was <204>\n\tat org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)\n\tat org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:6)\n\tat stepDefs.CommonSteps.theHTTPStatusCodeShouldBe(CommonSteps.java:23)\n\tat âœ½.the HTTP status code should be 404 \"Bad Request\"(file:///Users/kar-ho/Documents/projects/sparta/LearningPath/LPApiTestFramework/Project1-ApiTestFramework/src/test/resources/features/courses.feature:18)\n","duration":1659000,"status":"failed"},"line":18,"name":"the HTTP status code should be 404 \"Bad Request\"","match":{"arguments":[{"val":"404","offset":31},{"val":"\"Bad Request\"","offset":35}],"location":"stepDefs.CommonSteps.theHTTPStatusCodeShouldBe(int,java.lang.String)"},"keyword":"Then "},{"result":{"duration":61000,"status":"skipped"},"line":19,"name":"response should include an error message","match":{"location":"stepDefs.courses.GetCourseById.responseShouldIncludeAnErrorMessage()"},"keyword":"And "}],"tags":[{"name":"@ignore"}]},{"start_timestamp":"2024-07-31T08:11:07.176Z","line":21,"name":"Get course by invalid id","description":"","id":"courses;get-course-by-invalid-id","type":"scenario","keyword":"Scenario","steps":[{"result":{"duration":165000,"status":"passed"},"line":22,"name":"the id provided is invalid","match":{"location":"stepDefs.courses.GetCourseById.theIdProvidedIsInvalid()"},"keyword":"Given "},{"result":{"duration":9801000,"status":"passed"},"line":23,"name":"I send a GET request to the courses endpoint with \"invalid id\"","match":{"arguments":[{"val":"\"invalid id\"","offset":50}],"location":"stepDefs.courses.GetCourseById.iSendAGETRequestToTheCoursesEndpointWith(java.lang.String)"},"keyword":"When "},{"result":{"duration":153000,"status":"passed"},"line":24,"name":"the HTTP status code should be 400 \"Bad Request\"","match":{"arguments":[{"val":"400","offset":31},{"val":"\"Bad Request\"","offset":35}],"location":"stepDefs.CommonSteps.theHTTPStatusCodeShouldBe(int,java.lang.String)"},"keyword":"Then "},{"result":{"duration":9808000,"status":"passed"},"line":25,"name":"response should include an error message","match":{"location":"stepDefs.courses.GetCourseById.responseShouldIncludeAnErrorMessage()"},"keyword":"And "}]}],"name":"courses","description":"","id":"courses","keyword":"Feature","uri":"file:src/test/resources/features/courses.feature","tags":[]},{"line":1,"elements":[{"start_timestamp":"2024-07-31T08:11:07.202Z","line":2,"name":"get all spartans with valid token","description":"","id":"get-spartans;get-all-spartans-with-valid-token","type":"scenario","keyword":"Scenario","steps":[{"result":{"duration":9552000,"status":"passed"},"line":3,"name":"I have a valid bearer token","match":{"location":"stepDefs.CommonSteps.iHaveAValidBearerToken()"},"keyword":"Given "},{"result":{"duration":40416000,"status":"passed"},"line":4,"name":"I send a Get request to the Spartans endpoint","match":{"location":"stepDefs.spartans.GetSpartans.iSendAGetRequestToTheSpartansEndpoint()"},"keyword":"When "},{"result":{"duration":269000,"status":"passed"},"line":5,"name":"the HTTP status code should be 200 \"OK\"","match":{"arguments":[{"val":"200","offset":31},{"val":"\"OK\"","offset":35}],"location":"stepDefs.CommonSteps.theHTTPStatusCodeShouldBe(int,java.lang.String)"},"keyword":"Then "},{"result":{"duration":4264000,"status":"passed"},"line":6,"name":"the response should include an array of all Spartans","match":{"location":"stepDefs.spartans.GetSpartans.theResponseShouldIncludeAnArrayOfAllSpartans()"},"keyword":"And "}]},{"start_timestamp":"2024-07-31T08:11:07.261Z","line":8,"name":"get all spartans with invalid token","description":"","id":"get-spartans;get-all-spartans-with-invalid-token","type":"scenario","keyword":"Scenario","steps":[{"result":{"duration":127000,"status":"passed"},"line":9,"name":"I have an invalid bearer token","match":{"location":"stepDefs.spartans.GetSpartans.iHaveAnInvalidBearerToken()"},"keyword":"Given "},{"result":{"duration":10063000,"status":"passed"},"line":10,"name":"I send a Get request to the Spartans endpoint","match":{"location":"stepDefs.spartans.GetSpartans.iSendAGetRequestToTheSpartansEndpoint()"},"keyword":"When "},{"result":{"duration":158000,"status":"passed"},"line":11,"name":"the HTTP status code should be 401 \"Unauthorized\"","match":{"arguments":[{"val":"401","offset":31},{"val":"\"Unauthorized\"","offset":35}],"location":"stepDefs.CommonSteps.theHTTPStatusCodeShouldBe(int,java.lang.String)"},"keyword":"Then "}]}],"name":"get spartans","description":"","id":"get-spartans","keyword":"Feature","uri":"file:src/test/resources/features/getSpartans.feature","tags":[]},{"line":1,"elements":[{"start_timestamp":"2024-07-31T08:11:07.275Z","line":4,"name":"create spartan with valid token","description":"","id":"post-spartans;create-spartan-with-valid-token","type":"scenario","keyword":"Scenario","steps":[{"result":{"duration":10991000,"status":"passed"},"line":5,"name":"I have a valid bearer token","match":{"location":"stepDefs.CommonSteps.iHaveAValidBearerToken()"},"keyword":"Given "},{"result":{"duration":28695000,"status":"passed"},"line":6,"name":"I send a POST request to the relevant endpoint with a valid JSON body","match":{"location":"stepDefs.spartans.PostSpartan.iSendAPOSTRequestToTheRelevantEndpointWithAValidJSONBody()"},"keyword":"When "},{"result":{"error_message":"java.lang.AssertionError: \nExpected: is <201>\n     but: was <400>\n\tat org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)\n\tat org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:6)\n\tat stepDefs.CommonSteps.theHTTPStatusCodeShouldBe(CommonSteps.java:23)\n\tat âœ½.the HTTP status code should be 201 \"Created\"(file:///Users/kar-ho/Documents/projects/sparta/LearningPath/LPApiTestFramework/Project1-ApiTestFramework/src/test/resources/features/postSpartans.feature:7)\n","duration":675000,"status":"failed"},"line":7,"name":"the HTTP status code should be 201 \"Created\"","match":{"arguments":[{"val":"201","offset":31},{"val":"\"Created\"","offset":35}],"location":"stepDefs.CommonSteps.theHTTPStatusCodeShouldBe(int,java.lang.String)"},"keyword":"Then "},{"result":{"duration":82000,"status":"skipped"},"line":8,"name":"the response should include the details of the newly created Spartan","match":{"location":"stepDefs.spartans.PostSpartan.theResponseShouldIncludeTheDetailsOfTheNewlyCreatedSpartan()"},"keyword":"And "}],"tags":[{"name":"@ignore"}]},{"start_timestamp":"2024-07-31T08:11:07.321Z","line":10,"name":"create spartan with invalid token","description":"","id":"post-spartans;create-spartan-with-invalid-token","type":"scenario","keyword":"Scenario","steps":[{"result":{"duration":87000,"status":"passed"},"line":11,"name":"I have an invalid bearer token","match":{"location":"stepDefs.spartans.GetSpartans.iHaveAnInvalidBearerToken()"},"keyword":"Given "},{"result":{"duration":8316000,"status":"passed"},"line":12,"name":"I send a POST request to the relevant endpoint with a valid JSON body","match":{"location":"stepDefs.spartans.PostSpartan.iSendAPOSTRequestToTheRelevantEndpointWithAValidJSONBody()"},"keyword":"When "},{"result":{"duration":127000,"status":"passed"},"line":13,"name":"the HTTP status code should be 401 \"Unauthorised\"","match":{"arguments":[{"val":"401","offset":31},{"val":"\"Unauthorised\"","offset":35}],"location":"stepDefs.CommonSteps.theHTTPStatusCodeShouldBe(int,java.lang.String)"},"keyword":"Then "}]},{"start_timestamp":"2024-07-31T08:11:07.333Z","line":15,"name":"create spartan with missing fields","description":"","id":"post-spartans;create-spartan-with-missing-fields","type":"scenario","keyword":"Scenario","steps":[{"result":{"duration":14250000,"status":"passed"},"line":16,"name":"I have a valid bearer token","match":{"location":"stepDefs.CommonSteps.iHaveAValidBearerToken()"},"keyword":"Given "},{"result":{"duration":9946000,"status":"passed"},"line":17,"name":"I send a POST request to the relevant endpoint with payload with missing fields","match":{"location":"stepDefs.spartans.PostSpartan.iSendAPOSTRequestToTheRelevantEndpointWithPayloadWithMissingFields()"},"keyword":"When "},{"result":{"duration":351000,"status":"passed"},"line":18,"name":"the HTTP status code should be 400 \"Bad Request\"","match":{"arguments":[{"val":"400","offset":31},{"val":"\"Bad Request\"","offset":35}],"location":"stepDefs.CommonSteps.theHTTPStatusCodeShouldBe(int,java.lang.String)"},"keyword":"Then "},{"result":{"duration":5378000,"status":"passed"},"line":19,"name":"the response should include error messages indicating the validation issues.","match":{"location":"stepDefs.spartans.PostSpartan.theResponseShouldIncludeErrorMessagesIndicatingTheValidationIssues()"},"keyword":"And "}]}],"name":"post spartans","description":"","id":"post-spartans","keyword":"Feature","uri":"file:src/test/resources/features/postSpartans.feature","tags":[]}]